using System;
using System.Collections;
using FishingPrototype.Gameplay.FishingSpot;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace FishingPrototype.Gameplay.Minigames
{
    public class MalwareMiniGame : MiniGameBase
    {
        [Header("Malware MiniGame Configuration")] 
        [SerializeField] private float growPerSecond = .2f;
        [SerializeField] private float shrinkPerSecond = .25f;
        [SerializeField] private float changeCorrectInputTime = 1f;
        [SerializeField] private float centerImageStartSize = .1f;
        [SerializeField] private Image centerImage;
        [SerializeField] private TextMeshProUGUI keyPressText;
        
        private Vector3 _centerLocalScale;
        private IFishingSpot _currentFishingSpot;
        private int _miniGameAmount;

        private bool _holdingInput1 = false;
        private bool _holdingInput2 = false;
        private bool _currentInput1 = false;

        private void Start()
        {
            StartCoroutine(ChangeCorrectInput());
        }

        private void Update()
        {
            if (_centerLocalScale.x > 1f)
            {
                InitializeCenterImage();
                _currentFishingSpot.OnCompletedFishing();
                _miniGameAmount--;
                
                if(_miniGameAmount == 0)
                    CallMiniGameCompleteEvent();
            }
            if (_currentInput1)
            {
                if (_holdingInput1 && !_holdingInput2)
                {
                    _centerLocalScale.x += Time.deltaTime * growPerSecond;
                    _centerLocalScale.y += Time.deltaTime * growPerSecond;
                }
                else if(_centerLocalScale.x > .1f)
                {
                    _centerLocalScale.x -= Time.deltaTime * shrinkPerSecond;
                    _centerLocalScale.y -= Time.deltaTime * shrinkPerSecond;
                }
            }
            else
            {
                if (!_holdingInput1 && _holdingInput2)
                {
                    _centerLocalScale.x += Time.deltaTime * growPerSecond;
                    _centerLocalScale.y += Time.deltaTime * growPerSecond;
                }
                else if(_centerLocalScale.x > .1f)
                {
                    _centerLocalScale.x -= Time.deltaTime * shrinkPerSecond;
                    _centerLocalScale.y -= Time.deltaTime * shrinkPerSecond;
                }
            }
            centerImage.rectTransform.localScale = _centerLocalScale;
        }

        private IEnumerator ChangeCorrectInput()
        {
            WaitForSeconds waitForSeconds = new WaitForSeconds(changeCorrectInputTime);
            while (gameObject)
            {
                yield return waitForSeconds;
                _currentInput1 = !_currentInput1;
                keyPressText.text = _currentInput1 ? "Hold F Key" : "Hold G Key";
            }
        }
        
        public override FishingSpotType GetMiniGameType() => FishingSpotType.Malware;

        public override void StartMiniGame(IFishingSpot fishingSpot)
        {
            gameObject.SetActive(true);
            _currentFishingSpot = fishingSpot;
            _miniGameAmount = _currentFishingSpot.GetFishingSpotData().Item2;
            InitializeCenterImage();
        }

        public override void CloseMiniGame()
        {
            gameObject.SetActive(false);
        }

        public override void PerformMiniGameInput1() => _holdingInput1 = true;
        public override void PerformMiniGameInput2() => _holdingInput2 = true;
        public override void CancelMiniGameInput1() => _holdingInput1 = false;
        public override void CancelMiniGameInput2() => _holdingInput2 = false;

        private void InitializeCenterImage()
        {
            _centerLocalScale = new Vector3(centerImageStartSize, centerImageStartSize, 1);
            centerImage.rectTransform.localScale = _centerLocalScale;
        }
    }
}
