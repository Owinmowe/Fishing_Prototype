//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Boat Control"",
            ""id"": ""09861d55-072e-4543-b9cc-d030a99507e8"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""472832a8-cb0b-4506-8639-b827f91051f6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2d6afecd-e905-47d8-89f9-fa15bddd62fb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Try Fishing"",
                    ""type"": ""Button"",
                    ""id"": ""f7eed5d9-a02d-4188-88ba-5599d8cf1f56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel Fishing"",
                    ""type"": ""Button"",
                    ""id"": ""63bd32de-f3cf-45b9-aa92-d5e208257f95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9b27cc0d-774d-40aa-ae99-4a6cd746f8e0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""82cb30ba-bb02-4deb-a8da-51b9270e0ea1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""87606772-522a-418a-bf78-01aa4ede1727"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""649fc6fb-a2df-4656-adb0-483516d23b8c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1ead16bb-d210-4f6a-b314-88da9bcbae35"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""add3ef36-461c-4e4f-bf3f-858c4424e8a8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f5fe76a0-3622-4cb6-b15c-18bd58fb792d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Try Fishing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f5bec14-e550-446e-ba67-c6b42fcf1420"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Try Fishing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d3156a0-1f92-4db9-8fba-d78d4f145856"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Cancel Fishing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bc3a344-949c-4f3e-9d04-1abcf7aa9f41"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel Fishing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mini Games"",
            ""id"": ""1718f278-e04a-4993-9cec-ee303926a654"",
            ""actions"": [
                {
                    ""name"": ""MiniGame Input 1"",
                    ""type"": ""Button"",
                    ""id"": ""5d309f11-7164-43a1-9440-5a232ecec4ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiniGame Input 2"",
                    ""type"": ""Button"",
                    ""id"": ""3285ee52-ed78-4ce8-88d7-3ec0e1d3b625"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51fdec3f-1a43-4862-be15-df433b1058f5"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""MiniGame Input 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""393a7f5a-175b-4c9b-afe6-d07896340995"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MiniGame Input 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3906230e-a838-4d2c-9e6d-ef9c7586e90d"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""MiniGame Input 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb354431-863d-4d46-b381-f4c7a10b4ff3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MiniGame Input 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Boat Control
        m_BoatControl = asset.FindActionMap("Boat Control", throwIfNotFound: true);
        m_BoatControl_Accelerate = m_BoatControl.FindAction("Accelerate", throwIfNotFound: true);
        m_BoatControl_Rotate = m_BoatControl.FindAction("Rotate", throwIfNotFound: true);
        m_BoatControl_TryFishing = m_BoatControl.FindAction("Try Fishing", throwIfNotFound: true);
        m_BoatControl_CancelFishing = m_BoatControl.FindAction("Cancel Fishing", throwIfNotFound: true);
        // Mini Games
        m_MiniGames = asset.FindActionMap("Mini Games", throwIfNotFound: true);
        m_MiniGames_MiniGameInput1 = m_MiniGames.FindAction("MiniGame Input 1", throwIfNotFound: true);
        m_MiniGames_MiniGameInput2 = m_MiniGames.FindAction("MiniGame Input 2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Boat Control
    private readonly InputActionMap m_BoatControl;
    private IBoatControlActions m_BoatControlActionsCallbackInterface;
    private readonly InputAction m_BoatControl_Accelerate;
    private readonly InputAction m_BoatControl_Rotate;
    private readonly InputAction m_BoatControl_TryFishing;
    private readonly InputAction m_BoatControl_CancelFishing;
    public struct BoatControlActions
    {
        private @PlayerInput m_Wrapper;
        public BoatControlActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_BoatControl_Accelerate;
        public InputAction @Rotate => m_Wrapper.m_BoatControl_Rotate;
        public InputAction @TryFishing => m_Wrapper.m_BoatControl_TryFishing;
        public InputAction @CancelFishing => m_Wrapper.m_BoatControl_CancelFishing;
        public InputActionMap Get() { return m_Wrapper.m_BoatControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatControlActions set) { return set.Get(); }
        public void SetCallbacks(IBoatControlActions instance)
        {
            if (m_Wrapper.m_BoatControlActionsCallbackInterface != null)
            {
                @Accelerate.started -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnAccelerate;
                @Accelerate.performed -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnAccelerate;
                @Accelerate.canceled -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnAccelerate;
                @Rotate.started -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnRotate;
                @TryFishing.started -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnTryFishing;
                @TryFishing.performed -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnTryFishing;
                @TryFishing.canceled -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnTryFishing;
                @CancelFishing.started -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnCancelFishing;
                @CancelFishing.performed -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnCancelFishing;
                @CancelFishing.canceled -= m_Wrapper.m_BoatControlActionsCallbackInterface.OnCancelFishing;
            }
            m_Wrapper.m_BoatControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accelerate.started += instance.OnAccelerate;
                @Accelerate.performed += instance.OnAccelerate;
                @Accelerate.canceled += instance.OnAccelerate;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @TryFishing.started += instance.OnTryFishing;
                @TryFishing.performed += instance.OnTryFishing;
                @TryFishing.canceled += instance.OnTryFishing;
                @CancelFishing.started += instance.OnCancelFishing;
                @CancelFishing.performed += instance.OnCancelFishing;
                @CancelFishing.canceled += instance.OnCancelFishing;
            }
        }
    }
    public BoatControlActions @BoatControl => new BoatControlActions(this);

    // Mini Games
    private readonly InputActionMap m_MiniGames;
    private IMiniGamesActions m_MiniGamesActionsCallbackInterface;
    private readonly InputAction m_MiniGames_MiniGameInput1;
    private readonly InputAction m_MiniGames_MiniGameInput2;
    public struct MiniGamesActions
    {
        private @PlayerInput m_Wrapper;
        public MiniGamesActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MiniGameInput1 => m_Wrapper.m_MiniGames_MiniGameInput1;
        public InputAction @MiniGameInput2 => m_Wrapper.m_MiniGames_MiniGameInput2;
        public InputActionMap Get() { return m_Wrapper.m_MiniGames; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniGamesActions set) { return set.Get(); }
        public void SetCallbacks(IMiniGamesActions instance)
        {
            if (m_Wrapper.m_MiniGamesActionsCallbackInterface != null)
            {
                @MiniGameInput1.started -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMiniGameInput1;
                @MiniGameInput1.performed -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMiniGameInput1;
                @MiniGameInput1.canceled -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMiniGameInput1;
                @MiniGameInput2.started -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMiniGameInput2;
                @MiniGameInput2.performed -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMiniGameInput2;
                @MiniGameInput2.canceled -= m_Wrapper.m_MiniGamesActionsCallbackInterface.OnMiniGameInput2;
            }
            m_Wrapper.m_MiniGamesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MiniGameInput1.started += instance.OnMiniGameInput1;
                @MiniGameInput1.performed += instance.OnMiniGameInput1;
                @MiniGameInput1.canceled += instance.OnMiniGameInput1;
                @MiniGameInput2.started += instance.OnMiniGameInput2;
                @MiniGameInput2.performed += instance.OnMiniGameInput2;
                @MiniGameInput2.canceled += instance.OnMiniGameInput2;
            }
        }
    }
    public MiniGamesActions @MiniGames => new MiniGamesActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IBoatControlActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnTryFishing(InputAction.CallbackContext context);
        void OnCancelFishing(InputAction.CallbackContext context);
    }
    public interface IMiniGamesActions
    {
        void OnMiniGameInput1(InputAction.CallbackContext context);
        void OnMiniGameInput2(InputAction.CallbackContext context);
    }
}
